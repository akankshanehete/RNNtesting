{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Smartphonesensor_Activity Classification.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "TPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/akankshanehete/RNNtesting/blob/main/Smartphonesensor_classification_v1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W71I_JqTu29i"
      },
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import time\n",
        "from tensorflow import keras\n",
        "from keras import preprocessing\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "from pylab import rcParams\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import rc\n",
        "from pandas.plotting import register_matplotlib_converters\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, LSTM, BatchNormalization,Masking\n",
        "from scipy import stats\n",
        "\n",
        "%matplotlib inline\n",
        "%config InlineBackend.figure_format='retina'\n",
        "\n",
        "register_matplotlib_converters()\n",
        "sns.set(style='whitegrid', palette='muted', font_scale=1.5)\n",
        "\n",
        "rcParams['figure.figsize'] = 22, 10\n",
        "\n",
        "RANDOM_SEED = 42\n",
        "\n",
        "np.random.seed(RANDOM_SEED)\n",
        "tf.random.set_seed(RANDOM_SEED)"
      ],
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#PARAMETERS \n",
        "window_size = 15"
      ],
      "metadata": {
        "id": "epy98NGHBGhf"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eJU-ydXmu4kZ",
        "outputId": "a25ce750-2b95-4e20-d2df-322e9816ad7b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "!gdown --id 152sWECukjvLerrVG2NUO8gtMFg83RKCF --output WISDM_ar_latest.tar.gz\n",
        "!tar -xvf WISDM_ar_latest.tar.gz"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/gdown/cli.py:131: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n",
            "  category=FutureWarning,\n",
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=152sWECukjvLerrVG2NUO8gtMFg83RKCF\n",
            "To: /content/WISDM_ar_latest.tar.gz\n",
            "100% 11.4M/11.4M [00:00<00:00, 291MB/s]\n",
            "WISDM_ar_v1.1/\n",
            "WISDM_ar_v1.1/readme.txt\n",
            "WISDM_ar_v1.1/WISDM_ar_v1.1_raw.txt\n",
            "WISDM_ar_v1.1/WISDM_ar_v1.1_raw_about.txt\n",
            "WISDM_ar_v1.1/WISDM_ar_v1.1_transformed.arff\n",
            "WISDM_ar_v1.1/WISDM_ar_v1.1_trans_about.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jHBAslVU_I-I"
      },
      "source": [
        "column_names = ['user_id', 'activity', 'timestamp', 'x_axis', 'y_axis', 'z_axis']\n",
        "\n",
        "df = pd.read_csv('WISDM_ar_v1.1/WISDM_ar_v1.1_raw.txt', header=None, names=column_names)\n",
        "df.z_axis.replace(regex=True, inplace=True, to_replace=r';', value=r'')\n",
        "df['z_axis'] = df.z_axis.astype(np.float64)\n",
        "df.dropna(axis=0, how='any', inplace=True)"
      ],
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_SuX8mdb_inH",
        "outputId": "0ff3a941-b0ea-45d4-cd60-b9051814f785",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id activity       timestamp    x_axis     y_axis    z_axis\n",
              "0       33  Jogging  49105962326000 -0.694638  12.680544  0.503953\n",
              "1       33  Jogging  49106062271000  5.012288  11.264028  0.953424\n",
              "2       33  Jogging  49106112167000  4.903325  10.882658 -0.081722\n",
              "3       33  Jogging  49106222305000 -0.612916  18.496431  3.023717\n",
              "4       33  Jogging  49106332290000 -1.184970  12.108489  7.205164"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98c8e9dd-f9ac-4de4-a31d-69738d18fd69\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>activity</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>x_axis</th>\n",
              "      <th>y_axis</th>\n",
              "      <th>z_axis</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>33</td>\n",
              "      <td>Jogging</td>\n",
              "      <td>49105962326000</td>\n",
              "      <td>-0.694638</td>\n",
              "      <td>12.680544</td>\n",
              "      <td>0.503953</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>33</td>\n",
              "      <td>Jogging</td>\n",
              "      <td>49106062271000</td>\n",
              "      <td>5.012288</td>\n",
              "      <td>11.264028</td>\n",
              "      <td>0.953424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "      <td>Jogging</td>\n",
              "      <td>49106112167000</td>\n",
              "      <td>4.903325</td>\n",
              "      <td>10.882658</td>\n",
              "      <td>-0.081722</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>Jogging</td>\n",
              "      <td>49106222305000</td>\n",
              "      <td>-0.612916</td>\n",
              "      <td>18.496431</td>\n",
              "      <td>3.023717</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>33</td>\n",
              "      <td>Jogging</td>\n",
              "      <td>49106332290000</td>\n",
              "      <td>-1.184970</td>\n",
              "      <td>12.108489</td>\n",
              "      <td>7.205164</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98c8e9dd-f9ac-4de4-a31d-69738d18fd69')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-98c8e9dd-f9ac-4de4-a31d-69738d18fd69 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-98c8e9dd-f9ac-4de4-a31d-69738d18fd69');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mqp65KYQTe_S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "728ee265-0f2a-4d5e-fd2f-7c0338c99894"
      },
      "source": [
        "users = list(df.groupby(['user_id']))\n",
        "smartphonedfs = []\n",
        "for i in range(len(users)):\n",
        "  users[i] = users[i][1]\n",
        "\n",
        "for i in range (len(users)):\n",
        "  activ = list(users[i].groupby(['activity']))\n",
        "  for i in range(len(activ)):\n",
        "    smartphonedfs.append(activ[i][1])\n",
        "\n",
        "print(smartphonedfs[0])\n",
        "print(smartphonedfs[1])\n"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        user_id    activity      timestamp  x_axis  y_axis  z_axis\n",
            "966741        1  Downstairs  6552942304000   -0.15    9.15   -0.34\n",
            "966742        1  Downstairs  6552992292000    0.11    9.19    2.76\n",
            "966743        1  Downstairs  6553042310000   -4.06    7.40    4.02\n",
            "966744        1  Downstairs  6553092298000   -2.87    7.93    3.21\n",
            "966745        1  Downstairs  6553142347000   -0.19   10.04    4.82\n",
            "...         ...         ...            ...     ...     ...     ...\n",
            "971933        1  Downstairs  6895352430000   -0.61    9.72    2.07\n",
            "971934        1  Downstairs  6895402326000    5.71   11.35    0.69\n",
            "971935        1  Downstairs  6895452344000    8.62    5.41   -1.18\n",
            "971936        1  Downstairs  6895502332000    4.25    7.59    0.08\n",
            "971937        1  Downstairs  6895552320000   -0.34   11.30    0.72\n",
            "\n",
            "[2941 rows x 6 columns]\n",
            "        user_id activity      timestamp  x_axis  y_axis  z_axis\n",
            "948761        1  Jogging  5374662305000    4.48   14.18   -2.11\n",
            "948762        1  Jogging  5374712293000    3.95   12.26   -2.68\n",
            "948763        1  Jogging  5374762311000    6.05    9.72   -1.95\n",
            "948764        1  Jogging  5374812299000    5.24    7.21   -5.56\n",
            "948765        1  Jogging  5374862317000    7.27    5.79   -6.51\n",
            "...         ...      ...            ...     ...     ...     ...\n",
            "965872        1  Jogging  6298292310000  -13.57   -6.21    1.95\n",
            "965873        1  Jogging  6298342298000  -12.07   -3.60    2.03\n",
            "965874        1  Jogging  6298392347000   -9.28   -4.75   -0.65\n",
            "965875        1  Jogging  6298442304000   -5.86   -5.20    4.90\n",
            "965876        1  Jogging  6298492292000   -8.24   -6.02   -0.65\n",
            "\n",
            "[11056 rows x 6 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns = ['x_axis', 'y_axis', 'z_axis']\n",
        "x_columns = ['x_axis']\n",
        "y_columns = ['y_axis']\n",
        "z_columns = ['z_axis']\n"
      ],
      "metadata": {
        "id": "qEQUqguwsWb5"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a =[]\n",
        "actiontargets = []\n",
        "subjectids = []\n",
        "smartphonedflens = []\n",
        "\n",
        "actions = ['Downstairs','Jogging','Upstairs','Walking', 'Sitting','Standing']\n",
        "num_classes = len(actions)\n",
        "\n",
        "subjectids = []\n",
        "for sensordf in smartphonedfs:\n",
        "  actiontargets.append(actions.index(list(sensordf['activity'])[0]))\n",
        "  subjectids.append(list(sensordf['user_id'])[0])\n",
        "  smartphonedflens.append(len(sensordf))\n",
        "\n",
        "print(len(smartphonedfs))\n",
        "print(actiontargets)\n",
        "print(subjectids)\n",
        "print(smartphonedflens)\n",
        "print(smartphonedfs[0].head(10))\n",
        "pd.Series(smartphonedflens).describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D1jsMoIrtckS",
        "outputId": "89f9c3e3-50a6-4cc1-e631-831abe6fba8a"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "179\n",
            "[0, 1, 2, 3, 1, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 3, 0, 1, 5, 2, 3, 0, 1, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 4, 5, 2, 3, 0, 1, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 4, 5, 2, 3, 1, 3, 0, 1, 2, 3, 0, 1, 4, 5, 2, 3, 0, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 1, 4, 5, 3, 0, 1, 4, 5, 2, 3]\n",
            "[1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36]\n",
            "[2941, 11056, 3120, 12861, 11786, 11739, 3326, 11018, 1609, 2824, 3411, 12973, 1763, 895, 1257, 1377, 6079, 3281, 6405, 1664, 1515, 3387, 12257, 1433, 11818, 1679, 709, 1666, 12399, 2257, 9183, 2529, 2364, 3601, 11033, 3346, 10313, 2699, 3269, 4453, 17108, 12923, 3795, 12084, 1660, 4296, 13048, 2674, 12454, 4392, 12138, 2870, 12360, 2289, 1670, 2654, 10798, 4241, 12329, 1179, 1659, 4638, 13047, 2875, 13279, 8179, 13859, 1762, 12799, 2064, 11529, 1575, 2984, 1979, 1411, 12521, 3767, 2887, 5689, 9677, 2415, 11992, 1467, 1954, 2425, 12558, 2614, 16201, 2534, 2132, 4280, 17622, 4673, 12948, 15644, 5389, 4844, 13134, 4036, 9593, 1609, 2859, 4841, 12498, 3627, 6224, 5430, 7029, 1939, 12309, 4836, 6589, 2929, 12278, 690, 544, 3039, 6256, 6489, 6979, 3837, 11913, 3618, 13210, 3460, 12038, 2099, 1630, 3255, 12476, 2997, 1300, 2892, 14169, 4329, 12788, 2319, 1603, 4786, 12420, 3872, 1559, 3099, 4226, 12579, 3892, 14075, 2148, 2612, 4679, 16876, 2343, 12245, 3059, 1669, 3814, 12376, 4535, 2946, 3248, 1612, 2214, 14898, 2856, 12869, 1575, 1349, 3921, 13377, 12564, 1599, 1069, 7162, 4167, 12038, 2500, 1925, 5431, 6200]\n",
            "        user_id    activity      timestamp  x_axis  y_axis  z_axis\n",
            "966741        1  Downstairs  6552942304000   -0.15    9.15   -0.34\n",
            "966742        1  Downstairs  6552992292000    0.11    9.19    2.76\n",
            "966743        1  Downstairs  6553042310000   -4.06    7.40    4.02\n",
            "966744        1  Downstairs  6553092298000   -2.87    7.93    3.21\n",
            "966745        1  Downstairs  6553142347000   -0.19   10.04    4.82\n",
            "966746        1  Downstairs  6553192273000   -0.19   11.37    4.63\n",
            "966747        1  Downstairs  6553242292000   -1.73    9.15    2.91\n",
            "966748        1  Downstairs  6553292310000   -3.30    5.48   -2.07\n",
            "966749        1  Downstairs  6553342298000   -5.05   16.21    5.98\n",
            "966750        1  Downstairs  6553392316000   -1.12    7.35   -1.38\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count      179.000000\n",
              "mean      6135.212291\n",
              "std       4715.259145\n",
              "min        544.000000\n",
              "25%       2353.500000\n",
              "50%       3892.000000\n",
              "75%      11802.000000\n",
              "max      17622.000000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "testingdfs = []\n",
        "testinglabels = []\n",
        "\n",
        "trainingdfs = []\n",
        "traininglabels = []\n",
        "\n",
        "for i in range (len(smartphonedfs)):\n",
        "  if subjectids[i] > 18: \n",
        "    trainingdfs.append(smartphonedfs[i])\n",
        "    traininglabels.append(actiontargets[i])\n",
        "  else:\n",
        "    testingdfs.append(smartphonedfs[i])\n",
        "    testinglabels.append(actiontargets[i])\n",
        "\n",
        "print(traininglabels)\n",
        "print(len(traininglabels))\n",
        "print(testinglabels)\n",
        "print(len(testinglabels))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-wFaunay68Mr",
        "outputId": "d31c1daa-dc1f-49b6-fcd6-0ef6fb676777"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 4, 5, 2, 3, 1, 3, 0, 1, 2, 3, 0, 1, 4, 5, 2, 3, 0, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 1, 4, 5, 3, 0, 1, 4, 5, 2, 3]\n",
            "93\n",
            "[0, 1, 2, 3, 1, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 3, 0, 1, 5, 2, 3, 0, 1, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 4, 5, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 4, 5, 2, 3, 0, 1, 2, 3, 0, 1, 4, 5, 2, 3]\n",
            "86\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gaussian_velo = ['x_axis_avg','x_axis_std', 'y_axis_avg','y_axis_std', 'z_axis_avg','z_axis_std']\n",
        "\n",
        "def extract_gaussian_windowing(sensordf, period): \n",
        "  windowdf = pd.DataFrame(columns=gaussian_velo)\n",
        "  for column in columns: \n",
        "    # using the mean and variance for the windowing approach\n",
        "    windowdf[column+'_avg'] = sensordf[column].groupby(np.arange(len(sensordf))//period).mean()\n",
        "    windowdf[column+'_std'] = sensordf[column].groupby(np.arange(len(sensordf))//period).var()\n",
        "  return windowdf.dropna() \n",
        "\n",
        "  "
      ],
      "metadata": {
        "id": "O2GOnvUWFKE_"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "traininggaussdfs = []\n",
        "traininggaussdflens = []\n",
        "\n",
        "testinggaussdfs = []\n",
        "testinggaussdflens = []\n",
        "\n",
        "for sensordf in trainingdfs: \n",
        "  gaussiandf = extract_gaussian_windowing(sensordf, window_size)\n",
        "  traininggaussdfs.append(gaussiandf)\n",
        "  traininggaussdflens.append(len(gaussiandf))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "for sensordf in testingdfs: \n",
        "  gaussiandf = extract_gaussian_windowing(sensordf, window_size)\n",
        "  testinggaussdfs.append(gaussiandf)\n",
        "  testinggaussdflens.append(len(gaussiandf))\n",
        "print(pd.Series(traininggaussdflens).describe())\n",
        "pd.Series(testinggaussdflens).describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Wdk_EJuFOZn",
        "outputId": "a7b213ed-2267-4c2d-db82-ba5ead676251"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count      93.000000\n",
            "mean      413.989247\n",
            "std       315.886520\n",
            "min        37.000000\n",
            "25%       175.000000\n",
            "50%       282.000000\n",
            "75%       803.000000\n",
            "max      1175.000000\n",
            "dtype: float64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count      86.000000\n",
              "mean      404.430233\n",
              "std       314.473960\n",
              "min        48.000000\n",
              "25%       141.250000\n",
              "50%       227.000000\n",
              "75%       779.500000\n",
              "max      1141.000000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# creating sequences from the windowing dataframes to feed into the RNN\n",
        "trainingseq = list()\n",
        "testingseq = list()\n",
        "\n",
        "for i in range(len(traininggaussdfs)):\n",
        "  values = traininggaussdfs[i][gaussian_velo].values\n",
        "  trainingseq.append(values)\n",
        "\n",
        "for i in range(len(testinggaussdfs)):\n",
        "  values = testinggaussdfs[i][gaussian_velo].values\n",
        "  testingseq.append(values)\n",
        "\n"
      ],
      "metadata": {
        "id": "EmVptXmM1zRd"
      },
      "execution_count": 91,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# padding each sequence with a certain value in order to make them all the same length because RNN does not accept variable sequence lengths\n",
        "to_pad = 25000\n",
        "new_seq = []\n",
        "for one_seq in trainingseq:\n",
        "    len_one_seq = len(one_seq)\n",
        "    # -100 is the special value that sequences are padded with that the RNN can mask\n",
        "    last_val = -100\n",
        "    n = to_pad - len_one_seq\n",
        "   \n",
        "    to_concat = np.full((n, len(one_seq[0])), -100)\n",
        "    new_one_seq = np.concatenate([one_seq, to_concat])\n",
        "    new_seq.append(new_one_seq)\n",
        "\n",
        "\n",
        "# truncate each sequence to the desired length (e.g how many windows in each training sequence?)\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "seq_len= max(traininggaussdflens)\n",
        "final_seq = pad_sequences(new_seq, maxlen=seq_len, padding='post', dtype='float', truncating='post')\n",
        "\n",
        "trainingseq = np.array(final_seq)\n",
        "trainingseq.shape"
      ],
      "metadata": {
        "id": "33XjKXfq2_wY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8f9cb7a-da49-43e1-b723-43466d7678cd"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(93, 1175, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# padding each sequence with a certain value in order to make them all the same length because RNN does not accept variable sequence lengths\n",
        "new_seq = []\n",
        "for one_seq in testingseq:\n",
        "    len_one_seq = len(one_seq)\n",
        "    # -100 is the special value that sequences are padded with that the RNN can mask\n",
        "    last_val = -100\n",
        "    n = to_pad - len_one_seq\n",
        "   \n",
        "    to_concat = np.full((n, len(one_seq[0])), -100)\n",
        "    new_one_seq = np.concatenate([one_seq, to_concat])\n",
        "    new_seq.append(new_one_seq)\n",
        "\n",
        "\n",
        "# truncate each sequence to the desired length (e.g how many windows in each training sequence?)\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "\n",
        "final_seq = pad_sequences(new_seq, maxlen=seq_len, padding='post', dtype='float', truncating='post')\n",
        "\n",
        "testingseq = np.array(final_seq)\n",
        "testingseq.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "raiY9_ikBbhr",
        "outputId": "5e6150db-f40e-44da-e7bd-f32017903e27"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(86, 1175, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "x_train = np.array(trainingseq)\n",
        "y_train = np.array(traininglabels)\n",
        "\n",
        "x_test = np.array(testingseq)\n",
        "y_test = np.array(testinglabels)\n",
        "\n",
        "\n",
        "print(len(x_train))\n",
        "print(len(y_train))\n",
        "print(len(x_test))\n",
        "print(len(y_test))"
      ],
      "metadata": {
        "id": "Ro-AxbtZ9VOP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5493804e-20da-4538-90c8-e43d8a0b6d83"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "93\n",
            "93\n",
            "86\n",
            "86\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# model constants\n",
        "BATCH_SIZE = 50\n",
        "EPOCHS = 10"
      ],
      "metadata": {
        "id": "lgcGmWIE9j0K"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# building the rnn model (adding layers)\n",
        "\n",
        "accuracies = []\n",
        "runtimes = []\n",
        "for _ in range (10):\n",
        "  model = Sequential()\n",
        "  # add masking layer to the RNN to avoid the padded values in series since they are of variable length\n",
        "  model.add(tf.keras.layers.Masking(mask_value=-100, input_shape=(seq_len, 6)))\n",
        "  model.add(LSTM(128, input_shape=(x_train.shape[1:]), return_sequences=True))\n",
        "\n",
        "  model.add(Dropout(0.2))\n",
        "  model.add(BatchNormalization())  \n",
        "\n",
        "  model.add(LSTM(128, return_sequences=True))\n",
        "  model.add(Dropout(0.1))\n",
        "  model.add(BatchNormalization())\n",
        "\n",
        "  model.add(LSTM(128))\n",
        "  model.add(Dropout(0.2))\n",
        "  model.add(BatchNormalization())\n",
        "\n",
        "  model.add(Dense(32, activation='relu'))\n",
        "  model.add(Dropout(0.2))\n",
        "\n",
        "  # last layer has 2 nodes due to there being binary classification\n",
        "  model.add(Dense(6, activation='softmax'))\n",
        "\n",
        "  opt = tf.keras.optimizers.Adam(learning_rate=0.001, decay=1e-6)\n",
        "    \n",
        "  model.compile(\n",
        "    loss='sparse_categorical_crossentropy',\n",
        "    optimizer=opt,\n",
        "    metrics=['accuracy'])\n",
        "\n",
        "  start = time.perf_counter()\n",
        "  # training the model\n",
        "  model.fit(x_train, y_train, epochs=EPOCHS, batch_size=BATCH_SIZE, validation_data=(x_test,y_test), shuffle=False)\n",
        "  result = model.evaluate(x_test,y_test)\n",
        "  elapsed = time.perf_counter() - start\n",
        "  accuracies.append(result[1])\n",
        "  runtimes.append(elapsed)\n",
        "  \n",
        "\n",
        "mean_accuracy = sum(accuracies)/len(accuracies)\n",
        "print('mean accuracy: ' + str(mean_accuracy))\n",
        "print('standard_deviation:' + str(np.std(accuracies)))\n",
        "mean_runtime = sum(runtimes)/len(runtimes)\n",
        "print('mean runtime:' + str(mean_runtime))\n",
        "print('standard deviation:' + str(np.std(runtimes)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tZhjElzT9nhK",
        "outputId": "7bc02ff7-af86-4717-c3cb-4c77731a898c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "2/2 [==============================] - 31s 12s/step - loss: 1.9934 - accuracy: 0.3118 - val_loss: 1.6847 - val_accuracy: 0.4884\n",
            "Epoch 2/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 1.1017 - accuracy: 0.4946 - val_loss: 1.6084 - val_accuracy: 0.4651\n",
            "Epoch 3/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.8523 - accuracy: 0.6774 - val_loss: 1.5517 - val_accuracy: 0.4767\n",
            "Epoch 4/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.8054 - accuracy: 0.6237 - val_loss: 1.5112 - val_accuracy: 0.5000\n",
            "Epoch 5/10\n",
            "2/2 [==============================] - 14s 8s/step - loss: 0.7236 - accuracy: 0.7097 - val_loss: 1.4849 - val_accuracy: 0.5000\n",
            "Epoch 6/10\n",
            "2/2 [==============================] - 14s 8s/step - loss: 0.6627 - accuracy: 0.7312 - val_loss: 1.4564 - val_accuracy: 0.5233\n",
            "Epoch 7/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.5786 - accuracy: 0.7957 - val_loss: 1.4266 - val_accuracy: 0.5349\n",
            "Epoch 8/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.4710 - accuracy: 0.8387 - val_loss: 1.3944 - val_accuracy: 0.5465\n",
            "Epoch 9/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.5106 - accuracy: 0.7957 - val_loss: 1.3705 - val_accuracy: 0.5814\n",
            "Epoch 10/10\n",
            "2/2 [==============================] - 14s 8s/step - loss: 0.4004 - accuracy: 0.8817 - val_loss: 1.3476 - val_accuracy: 0.5465\n",
            "3/3 [==============================] - 4s 1s/step - loss: 1.3476 - accuracy: 0.5465\n",
            "Epoch 1/10\n",
            "2/2 [==============================] - 31s 12s/step - loss: 2.3055 - accuracy: 0.1505 - val_loss: 1.6753 - val_accuracy: 0.3372\n",
            "Epoch 2/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 1.2952 - accuracy: 0.5054 - val_loss: 1.5953 - val_accuracy: 0.4419\n",
            "Epoch 3/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 1.0641 - accuracy: 0.5699 - val_loss: 1.5418 - val_accuracy: 0.4884\n",
            "Epoch 4/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.7972 - accuracy: 0.6559 - val_loss: 1.4898 - val_accuracy: 0.4767\n",
            "Epoch 5/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.7468 - accuracy: 0.6989 - val_loss: 1.4456 - val_accuracy: 0.5116\n",
            "Epoch 6/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.5675 - accuracy: 0.8172 - val_loss: 1.4083 - val_accuracy: 0.5349\n",
            "Epoch 7/10\n",
            "2/2 [==============================] - 15s 9s/step - loss: 0.4889 - accuracy: 0.8495 - val_loss: 1.3773 - val_accuracy: 0.5000\n",
            "Epoch 8/10\n",
            "2/2 [==============================] - 15s 9s/step - loss: 0.5243 - accuracy: 0.8065 - val_loss: 1.3585 - val_accuracy: 0.5233\n",
            "Epoch 9/10\n",
            "2/2 [==============================] - 15s 9s/step - loss: 0.4612 - accuracy: 0.8280 - val_loss: 1.3460 - val_accuracy: 0.5233\n",
            "Epoch 10/10\n",
            "2/2 [==============================] - 14s 8s/step - loss: 0.3977 - accuracy: 0.8710 - val_loss: 1.3334 - val_accuracy: 0.5349\n",
            "3/3 [==============================] - 4s 1s/step - loss: 1.3334 - accuracy: 0.5349\n",
            "Epoch 1/10\n",
            "2/2 [==============================] - 31s 12s/step - loss: 2.2318 - accuracy: 0.1935 - val_loss: 1.6869 - val_accuracy: 0.3605\n",
            "Epoch 2/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 1.2819 - accuracy: 0.4516 - val_loss: 1.6025 - val_accuracy: 0.4302\n",
            "Epoch 3/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.9745 - accuracy: 0.5699 - val_loss: 1.5507 - val_accuracy: 0.4767\n",
            "Epoch 4/10\n",
            "2/2 [==============================] - 14s 8s/step - loss: 0.8284 - accuracy: 0.7097 - val_loss: 1.5009 - val_accuracy: 0.5349\n",
            "Epoch 5/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.6724 - accuracy: 0.7527 - val_loss: 1.4507 - val_accuracy: 0.5349\n",
            "Epoch 6/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.5777 - accuracy: 0.7634 - val_loss: 1.4157 - val_accuracy: 0.5233\n",
            "Epoch 7/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.5105 - accuracy: 0.8387 - val_loss: 1.3974 - val_accuracy: 0.5116\n",
            "Epoch 8/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.4326 - accuracy: 0.8817 - val_loss: 1.3851 - val_accuracy: 0.4535\n",
            "Epoch 9/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.4691 - accuracy: 0.8172 - val_loss: 1.3670 - val_accuracy: 0.4767\n",
            "Epoch 10/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 0.4492 - accuracy: 0.8172 - val_loss: 1.3483 - val_accuracy: 0.5116\n",
            "3/3 [==============================] - 3s 1s/step - loss: 1.3483 - accuracy: 0.5116\n",
            "Epoch 1/10\n",
            "2/2 [==============================] - 30s 12s/step - loss: 1.7962 - accuracy: 0.2688 - val_loss: 1.6869 - val_accuracy: 0.4302\n",
            "Epoch 2/10\n",
            "2/2 [==============================] - 13s 8s/step - loss: 1.0583 - accuracy: 0.5806 - val_loss: 1.6247 - val_accuracy: 0.4767\n",
            "Epoch 3/10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "rNUCKiqBSlxm"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}